---
layout: post
title:  "클래스"
date:   2023-09-03
last_modified_at: 2018-09-20
categories: [Jekyll Paper]
tags: [Getting Start]
---
### 1 클래스란 무엇인가?
Class:교실?이런게 아니라. 코딩에서 
* Class는
"객체 지향 프로그래밍(OOP)에서 특정 객체를 생성하기 위해 변수와 메소드를 정의하는 일종의 틀(template)인것이다."

이렇게만 말하면 뭔 소린지 이해가 안될텐데
###### "솔직히 저도 모릅니다."
![Alt text](https://i.pinimg.com/474x/4b/5d/71/4b5d71bb2a2b466ddafc0ab943d5f34e.jpg){: width="15%"",height="10%""}

---
* Class의 예시 사진을 본다면 이해가 될수도있다.
![Alt text](https://blog.kakaocdn.net/dn/bCvo8S/btqD8Pmqrw5/Box3522lcasOlks3p8YRDK/img.png){: width="70%"",height="40%""}
* Field:"클래스 안에서 독립적으로 선언되는 변수"
* Constructor:"New 연산자에 의해서 단 한 번 호출되는 단위=초기화 역할"
* Method:"클래스(Class)의 내부에 존재하는 영역으로, 특정 기능을 하는 코드를 묶어서 나타내는 것"
### 1.1 필드의 선언과 사용
###### 필드를 알려줬는데도 모르겠다고요?
![Alt text](https://edgio.clien.net/F01/8980797/3a2c8f1a34486f.jpg?scale=width[420],options[limit]){: width="25%"",height="10%""}
###### 필드 사용법을 한번 봐봅시다!
![Alt text](https://blog.kakaocdn.net/dn/WWi5F/btqEamLcn0D/JyAZKJBggD1Go5MLvFxYt0/img.png){: width="60%"",height="40%""}

###### 필드 선언법은 아주 간단해요, 변수선언이랑 방법이 동일하거든요?
```
타입 필드명 [ = 초기값] ;
```
###### 단 반드시 클래스 블록에서 선언이 되어야만 필드선언이 됩니다.
```
public class Car {
    String model = "그랜저"; //고유 데이터 필드
    int speed = 300;        //상태 데이터 필드
    boolean start = true;   //상태 데이터 필드
    Tire tire = new Tire(); //부품 객체 필드
}
```
###### 초기값을 제공하지 않을 경우 필드는 객체 생성 시 자동으로 기본값으로 초기화 됩니다. 다음 표를 보면 타입별 기본값을 보여줍니다.
![Alt text](https://mblogthumb-phinf.pstatic.net/MjAxNzAzMTJfMTcx/MDAxNDg5MzEyNDE3NjM1.Y2WmMz1JGlrtg1uO5HkVFn9TlWXBo0HkMoamvH-p1Qwg.e-Kn0dinpxPZ05eE4Q8520snOgyy18eJAmSt8C4mdQYg.JPEG.heartflow89/image_8086124131489310744031.jpg?type=w800){: width="55%"",height="10%""}
### 1.2 필드 사용
###### 필드는 선언한다고 바로 쓰는게 아니다.
![Alt text](https://blog.kakaocdn.net/dn/bxQ3zo/btqJKvDazn4/x7UVS0jibXQXBtFGNwBgE1/img.png){: width="55%"",height="10%""}
###### 필드는 객체의 데이터이므로 객체가 존재하지 않으면 필드도 존재하지 않는 것이다.
###### 클래스로부터 객체가 생성된후에야 비로소 필드를 사용가능하다. 필드는 객체 내부의 생성자와 메소드 내부에서도 사용할수 있고, 객체 외부에서도 접근하여 사용할수있다.
* 객체 내부에서는 단순히 필드명으로 읽고 변경할수있지만 외부 객체에서는 참조 변수와 도트(.)연산자를 이용하여 필드를 읽고 변경해주어야 한다.(도트는 객체 접근 연산자로,객체가 가지고 있는 필드나 메소드에 접근 하고자 할때 변수 뒤에 붙는다.)

##### 뭐가 이렇게 어렵냐구요?
![Alt text](https://item.kakaocdn.net/do/cc367e71be7a88a75d63c100eb2b2c618f324a0b9c48f77dbce3a43bd11ce785){: width="15%"",height="10%""}
글쎄요..코딩이 다 이렇죠 뭐,,ㅎㅇㅌ!

---
### 1.3 생성자 선언과 호출
###### NEW 연산자는 객체를 생성한 후 연이어 생성자를 호출해 객체를 초기화 해주는 역할을 해줍니다.객체 초기화를 하거나 메소드를 호출해서 객체를 사용할 준비를 하는것입니다.
```
클래스 변수 = new 클래스();
```
###### 생성자가 성공적으로 실행이 끝난다면 new 연산자는 객체의 주소를 리턴한비나다. 리턴된 주소는 클래스 변수에 대입되어 객체의 필드나 메소드에 접근할때 쓰입니다
```
"클래스가 public class로 선언되면 기본 생성자도 public이 붙지만, 클래스가 public없이 
class로만 선언되면 기본 생성자에도 public이 붙지않습니다."
```
####생성자 선언.
* 객체를 다양하게 초기화하기 위해 생성자를 다음과 같이 이용할수있다.
```
클래스(매개변수, ...){
    //객체의 초기화 코드
}
```
##### 생성자는 메소드와 비슷한 모양을 가지고 있으나, 리턴타입이 없고 클래스이름과 동일합니다.
##### 매개변수는 new연산자로 생성자를 호출할때 매개값을 생성자 블록 내부로 전달하는 역할을 한다. 예를 들어 다음과 같이 Car 생성자를 호출할때 3개의 매개밧을 블록 내부로 전달한다 가정해보면
```
Car myCar = new Car("그랜저","검정",300);
```
##### 3개의 매개값을 손서대로 매개변수롷 대입받기 위해서는 다음과 같이 생성자가 선언되어야합니다.
```
public class Car {
    //생성자 선언
    Car(String model, String color, int maxSpeed) {...}
}
```
#### 필드 초기화
